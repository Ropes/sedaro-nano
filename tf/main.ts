import { Construct } from "constructs";
import { Token, Fn, App } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DeploymentV1 } from "./.gen/providers/kubernetes/deployment-v1";
import { Namespace } from "./.gen/providers/kubernetes/namespace";
import { KubernetesProvider } from "./.gen/providers/kubernetes/provider";
import { ServiceV1 } from "./.gen/providers/kubernetes/service-v1";
interface MyConfig {
  template: any;
}
class MyConvertedCode extends Construct {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new KubernetesProvider(this, "kubernetes", {
      configContext: "minikube",
      configPath: "~/.kube/config.minikube",
    });
    new DeploymentV1(this, "dask-scheduler", {
      metadata: {
        labels: {
          name: "dask-scheduler",
        },
        name: "dask-scheduler",
      },
      spec: {
        container: [
          {
            image: "ghcr.io/dask/dask:2023.8.1",
            name: "scheduler",
            port: [
              {
                name: "scheduler-api",
                port: 8786,
                target_port: 8786,
              },
              {
                name: "scheduler-dashboard",
                port: 8787,
                target_port: 8787,
              },
            ],
            requests: [
              {
                cpu: "250m",
                memory: "50Mi",
              },
            ],
          },
        ],
        liveness_probe: [
          {
            http_get: [
              {
                path: "/status",
                port: 8786,
              },
            ],
            initial_delay_seconds: 10,
            period_seconds: 3,
          },
        ],
        replicas: Token.asString(1),
        selector: {
          matchLabels: {
            app: "dask-scheduler",
          },
        },
        template: config.template,
      },
    });
    const sedaro = new Namespace(this, "sedaro", {
      metadata: {
        name: "sedaro",
      },
    });
    const kubernetesServiceV1DaskScheduler = new ServiceV1(
      this,
      "dask-scheduler_3",
      {
        metadata: {
          name: "dask-scheduler",
          namespace: Token.asString(
            Fn.lookupNested(sedaro.metadata, ["0", "name"])
          ),
        },
        session_affinity: "ClientIP",
        spec: {
          port: [
            {
              port: 8786,
              protocol: "TCP",
            },
            {
              port: 8787,
              protocol: "TCP",
            },
          ],
          selector: {
            app: "dask-scheduler",
          },
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    kubernetesServiceV1DaskScheduler.overrideLogicalId("dask-scheduler");
  }
}


const app = new App();
new MyConvertedCode(app, "learn-cdktf-docker");
app.synth();
