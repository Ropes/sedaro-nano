import { Construct } from "constructs";
import { App, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DeploymentV1 } from "./.gen/providers/kubernetes/deployment-v1";
import { KubernetesProvider } from "./.gen/providers/kubernetes/provider";
import { ServiceV1 } from "./.gen/providers/kubernetes/service-v1";
import { NamespaceV1 } from "@cdktf/provider-kubernetes/lib/namespace-v1";

class MyConvertedCode extends Construct {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

const conf = {
  metadata: "sedaro",
  namespace: "sedaro",
};
//new MyConvertedCode(app, "tf", conf);

class SedaroStack extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new KubernetesProvider(this, "kubernetes", {
      configContext: "minikube",
      configPath: "~/.kube/config.minikube",
    });
    const ns = "sedaro";

    new NamespaceV1(this, "sedaro-ns", {
      metadata: {
        name: ns,
      },
    });


    new DeploymentV1(this, "deploy-dask-scheduler", {
      metadata: {
        labels: {
          app: "dask-scheduler",
        },
        name: "dask-scheduler",
        namespace: ns,
      },
      spec: {
        replicas: Token.asString(1),
        selector: {
          matchLabels: {
            app: "dask-scheduler",
          },
        },
        template: {
          metadata: {
            labels: {
              app: "dask-scheduler",
            },
            name: "dask-scheduler"
          },
          spec: {
            container: [
              {
                image: "ghcr.io/dask/dask:2023.8.1",
                name: "scheduler",
                command: ["dask", "scheduler"],
                port: [
                  {
                    containerPort: 8786,
                    name: "scheduler-api",
                    protocol: "TCP",
                  },
                  {
                    containerPort: 8787,
                    name: "scheduler-dash",
                    protocol: "TCP",
                  },
                ],
                resources: {
                  limits: {
                    cpu: "0.5",
                    memory: "512Mi",
                  },
                  requests: {
                    cpu: "250m",
                    memory: "50Mi",
                  },
                },
              },
            ],
          },
        },
      },
    });

    new DeploymentV1(this, "deploy-dask-workers", {
      metadata: {
        labels: {
          app: "dask-workers",
        },
        name: "dask-workers",
        namespace: ns,
      },
      spec: {
        replicas: Token.asString(3),
        selector: {
          matchLabels: {
            app: "dask-workers",
          },
        },
        template: {
          metadata: {
            labels: {
              app: "dask-workers",
            },
            name: "dask-workers"
          },
          spec: {
            container: [
              {
                image: "ghcr.io/dask/dask:2023.8.1",
                name: "worker",
                command: ["dask", "worker", "dask-scheduler:8786"],
                port: [
                  {
                    name: "worker-dash",
                    containerPort: 8787,
                    protocol: "TCP",
                  },
                ],
                resources: {
                  limits: {
                    cpu: "1",
                    memory: "1024Mi",
                  },
                  requests: {
                    cpu: "250m",
                    memory: "50Mi",
                  },
                },
              },
            ],
          },
        },
      },
    });

    new ServiceV1(this, "dask-scheduler-svc", {
      metadata: {
        name: "dask-scheduler",
        namespace: ns,
      },
      spec: {
        port: [
          {
            name: "dask-scheduler-api",
            port: 8786,
            protocol: "TCP",
          },
          {
            name: "dask-scheduler-dash",
            port: 8787,
            protocol: "TCP",
          },
        ],
        selector: {
          app: "dask-scheduler",
        },
      },
    });

    new ServiceV1(this, "dask-notebook-svc", {
      metadata: {
        name: "dask-notebook",
        namespace: ns,
      },
      spec: {
        type: "NodePort",
        port: [
          {
            name: "dask-notebook",
            port: 8888,
            protocol: "TCP",
          },
        ],
        selector: {
          service: "dask-notebook",
        },
      },
    });

    new DeploymentV1(this, "deploy-dask-notebook", {
      metadata: {
        name: "dask-notebook",
        labels: {
          service: "dask-notebook"
        },
        namespace: ns,
      },
      spec: {
        replicas: Token.asString(1),
        selector: {
          matchLabels: {
            service: "dask-notebook",
          },
        },
        template: {
          metadata: {
            labels: {
              service: "dask-notebook",
            },
            name: "dask-notebook"
          },
          spec: {
            container: [
              {
                image: "ghcr.io/dask/dask-notebook:2023.8.1",
                name: "dask-notebook",
                port: [
                  {
                    name: "dask-notebook",
                    containerPort: 8888,
                    protocol: "TCP",
                  },
                ],
                resources: {
                  limits: {
                    cpu: "1",
                    memory: "1024Mi",
                  },
                  requests: {
                    cpu: "250m",
                    memory: "50Mi",
                  },
                },
              }
            ]
          }
        },
      },
    });

    new ServiceV1(this, "redis-svc",
      {
        metadata: {
          labels: {
            service: "redis",
          },
          namespace: ns,
          name: "redis",
        },

        spec: {
          port: [
            {
              name: "redis-port",
              port: 6379,
              protocol: "TCP",
            },
          ],
          selector: {
            service: "redis",
          }
        },
      }
    );

    new DeploymentV1(this, "deploy-redis", {
      metadata: {
        name: "redis",
        labels: {
          service: "redis"
        },
        namespace: ns,
      },
      spec: {
        replicas: Token.asString(1),
        selector: {
          matchLabels: {
            service: "redis",
          },
        },
        template: {
          metadata: {
            labels: {
              service: "redis",
            },
            name: "redis"
          },
          spec: {
            container: [
              {
                image: "redis:7",
                name: "redis",
                port: [
                  {
                    name: "redis-service",
                    containerPort: 6379,
                    protocol: "TCP",
                  },
                ],
                resources: {
                  limits: {
                    cpu: "1",
                    memory: "1024Mi",
                  },
                  requests: {
                    cpu: "250m",
                    memory: "50Mi",
                  },
                },
              }
            ]
          }

        },

      },
    });

    // TODO: Deployment for flask frontend "porta"

    // TODO: porta-Service LoadBalancer
    new ServiceV1(this, "porta-svc", {
      metadata: {
        name: "porta-service",
        namespace: ns,
      },
      spec: {
        type: "NodePort",
        port: [
          {
            name: "porta",
            port: 8080,
            protocol: "TCP",
          },
        ],
        selector: {
          app: "porta",
        },
      },
    });

    //const conf = { metadata: "sedaro" };
    new MyConvertedCode(this, "tf");
  }
}


const app = new App();
new SedaroStack(app, conf.metadata)
app.synth();